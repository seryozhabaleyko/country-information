{"version":3,"sources":["components/Logo.js","components/DarkMode.js","components/Navbar.js","components/Country.js","components/CountryList.js","constants.js","api.js","actions/country.js","actionTypes.js","selector.js","containers/CountryListContainer.js","components/Search.js","actions/search.js","actions/filter.js","components/Filter.js","components/Home.js","components/CountrySelected.js","components/Back.js","components/CountryPage.js","containers/CountryPageContainer.js","components/App.js","reducers/country.js","reducers/countries.js","reducers/filter.js","reducers/index.js","store.js","index.js"],"names":["Logo","to","className","DarkMode","Navbar","Country","name","flag","population","region","capital","slug","slugify","toLowerCase","src","alt","CountryList","isFetching","items","errorMessage","itemsCount","Alert","intent","title","Pane","display","alignItems","justifyContent","height","Spinner","length","map","country","key","defaultErrorMessage","Api","axios","create","baseURL","headers","countriesFailure","type","payload","fetchCountries","dispatch","a","get","response","data","message","countryFailure","errorMessages","getCountrySelector","createSelector","state","getCountriesSelector","countries","mapDispatchToProps","connect","useEffect","Search","useState","inputValue","setInputValue","useDispatch","SearchInput","placeholder","value","onChange","event","target","filterByName","filterByRegionFailure","error","Filter","useSelector","filter","style","Combobox","openOnFocus","selected","isLoading","Home","margin","CountrySelected","nativeName","subregion","topLevelDomain","currencies","languages","borders","item","Button","marginLeft","Back","history","useHistory","BackButton","onClick","goBack","CountryPage","fetchCountry","match","params","App","path","component","exact","initialState","rootReducer","combineReducers","countryListByName","includes","console","log","store","createStore","composeWithDevTools","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c175c31a.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport './Logo.scss';\r\n\r\nfunction Logo() {\r\n\r\n    return (\r\n        <Link to=\"/\" className=\"logo\">Where in the world?</Link>\r\n    );\r\n}\r\n\r\nexport default Logo;","import React from 'react';\r\n\r\nfunction DarkMode() {\r\n\r\n    return (\r\n        <div className=\"dark-mode\">DarkMode</div>\r\n    );\r\n}\r\n\r\nexport default DarkMode;","import React from 'react';\r\n\r\nimport Logo from './Logo';\r\nimport DarkMode from './DarkMode';\r\n\r\nimport './Navbar.scss';\r\n\r\nfunction Navbar() {\r\n\r\n    return (\r\n        <nav className=\"navbar\">\r\n            <div className=\"container\">\r\n                <Logo />\r\n                <DarkMode />\r\n            </div>\r\n        </nav>\r\n    );\r\n}\r\n\r\nexport default Navbar;","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport slugify from 'slugify';\r\n\r\nimport './Country.scss';\r\n\r\nfunction Country({ name, flag, population, region, capital }) {\r\n\r\n    const slug = slugify(name.toLowerCase());\r\n\r\n    return (\r\n        <Link to={`/country/${slug}`}>\r\n            <article className=\"country\">\r\n                <img src={flag} alt={name}/>\r\n                <div className=\"country-body\">\r\n                    <h1 className=\"country-title\">{name}</h1>\r\n                    <ul className=\"country-info\">\r\n                        <li>\r\n                            <strong>Population: </strong>\r\n                            {population}\r\n                        </li>\r\n                        <li>\r\n                            <strong>Region: </strong>\r\n                            {region}\r\n                        </li>\r\n                        <li>\r\n                            <strong>Capital: </strong>\r\n                            {capital}\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n            </article>\r\n        </Link>\r\n    );\r\n}\r\n\r\nexport default Country;","import React from 'react';\r\nimport { Alert, Pane, Spinner } from 'evergreen-ui';\r\n\r\nimport Country from './Country';\r\n\r\nimport './CountryList.scss';\r\n\r\nfunction CountryList({ isFetching, items, itemsCount, errorMessage }) {\r\n\r\n    return (\r\n        <>\r\n            {errorMessage && (\r\n                <Alert\r\n                    intent=\"danger\"\r\n                    title={errorMessage}\r\n                />\r\n            )}\r\n            {isFetching && (\r\n                <Pane display=\"flex\" alignItems=\"center\" justifyContent=\"center\" height={300}>\r\n                    <Spinner/>\r\n                </Pane>\r\n            )}\r\n            <div className=\"country-list\">\r\n                {items.length > 0 && items.map((country) => (\r\n                    <Country key={country.name} {...country} />\r\n                ))}\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default CountryList;","export const defaultErrorMessage = 'Сервер временно недоступен';","import axios from 'axios';\r\n\r\nconst Api = axios.create({\r\n    baseURL: 'https://restcountries.eu/rest/v2',\r\n    headers: {\r\n        'Accept': 'application/json',\r\n        'Content-Type': 'application/json',\r\n    },\r\n});\r\n\r\nexport default Api;","import {\r\n    GET_COUNTRIES_FAILURE,\r\n    GET_COUNTRIES_REQUEST,\r\n    GET_COUNTRIES_SUCCESS,\r\n    GET_COUNTRY_FAILURE,\r\n    GET_COUNTRY_REQUEST,\r\n    GET_COUNTRY_SUCCESS,\r\n} from '../actionTypes';\r\nimport { defaultErrorMessage } from '../constants';\r\nimport Api from '../api';\r\n\r\nconst countriesRequest = () => ({\r\n    type: GET_COUNTRIES_REQUEST,\r\n});\r\n\r\nconst countriesSuccess = (country) => ({\r\n    type: GET_COUNTRIES_SUCCESS,\r\n    payload: country,\r\n});\r\n\r\nconst countriesFailure = (errorMessage = defaultErrorMessage) => ({\r\n    type: GET_COUNTRIES_FAILURE,\r\n    payload: errorMessage,\r\n});\r\n\r\nexport const fetchCountries = () => async (dispatch) => {\r\n\r\n    dispatch(countriesRequest());\r\n\r\n    try {\r\n        const response = await Api.get('/all');\r\n        dispatch(countriesSuccess(response.data));\r\n    } catch (error) {\r\n        dispatch(countriesFailure(error.message));\r\n    }\r\n\r\n};\r\n\r\nconst countryRequest = () => ({\r\n    type: GET_COUNTRY_REQUEST,\r\n});\r\n\r\nconst countrySuccess = (country) => ({\r\n    type: GET_COUNTRY_SUCCESS,\r\n    payload: country,\r\n});\r\n\r\nconst countryFailure = (errorMessages = defaultErrorMessage) => ({\r\n    type: GET_COUNTRY_FAILURE,\r\n    payload: errorMessages,\r\n});\r\n\r\nexport const fetchCountry = (slug) => async (dispatch) => {\r\n\r\n    dispatch(countryRequest());\r\n\r\n    try {\r\n        const response = await Api.get(`/name/${slug}?fullText=true`);\r\n        dispatch(countrySuccess(response.data));\r\n    } catch (error) {\r\n        dispatch(countryFailure(error.message));\r\n    }\r\n\r\n};","export const GET_COUNTRIES_REQUEST = 'GET_COUNTRIES_REQUEST';\r\nexport const GET_COUNTRIES_SUCCESS = 'GET_COUNTRIES_SUCCESS';\r\nexport const GET_COUNTRIES_FAILURE = 'GET_COUNTRIES_FAILURE';\r\n\r\nexport const GET_COUNTRY_REQUEST = 'GET_COUNTRY_REQUEST';\r\nexport const GET_COUNTRY_SUCCESS = 'GET_COUNTRY_SUCCESS';\r\nexport const GET_COUNTRY_FAILURE = 'GET_COUNTRY_FAILURE';\r\n\r\nexport const SET_COUNTRY_BY_NAME = 'SET_COUNTRY_BY_NAME';\r\n\r\nexport const FILTER_BY_REGION_REQUEST = 'FILTER_BY_REGION_REQUEST';\r\nexport const FILTER_BY_REGION_SUCCESS = 'FILTER_BY_REGION_SUCCESS';\r\nexport const FILTER_BY_REGION_FAILURE = 'FILTER_BY_REGION_FAILURE';","import { createSelector } from 'reselect';\r\n\r\nconst countryIsFetching = (state) => state.country.isFetching;\r\nconst countryData = (state) => state.country.data;\r\nconst countryErrorMessage = (state) => state.country.errorMessage;\r\n\r\nexport const getCountrySelector = createSelector(\r\n    countryIsFetching,\r\n    countryData,\r\n    countryErrorMessage,\r\n    (isFetching, country, errorMessage) => ({\r\n        isFetching, country, errorMessage,\r\n    }),\r\n);\r\n\r\nconst countriesIsFetching = (state) => state.countries.isFetching;\r\nconst countriesItems = (state) => state.countries.items;\r\nconst countriesItemsCount = (state) => state.countries.itemsCount;\r\nconst countriesErrorMessage = (state) => state.countries.errorMessage;\r\n\r\nexport const getCountriesSelector = createSelector(\r\n    countriesIsFetching,\r\n    countriesItems,\r\n    countriesItemsCount,\r\n    countriesErrorMessage,\r\n    (isFetching, items, itemsCount, errorMessage) => ({\r\n        isFetching, items, itemsCount, errorMessage,\r\n    }),\r\n);","import React, { useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport CountryList from '../components/CountryList';\r\nimport { fetchCountries } from '../actions/country';\r\nimport { getCountriesSelector } from '../selector';\r\n\r\nfunction CountryListContainer({ fetchCountries, country }) {\r\n\r\n    useEffect(() => {\r\n        if (!country.items.length) {\r\n            fetchCountries();\r\n        }\r\n    }, [fetchCountries, country.items]);\r\n\r\n    return <CountryList {...country} />;\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    country: getCountriesSelector(state),\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n    fetchCountries,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CountryListContainer);","import React, { useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { SearchInput } from 'evergreen-ui';\r\n\r\nimport { filterByName } from '../actions/search';\r\n\r\nimport './Search.scss';\r\n\r\nfunction Search() {\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n    const dispatch = useDispatch();\r\n\r\n    const handleChange = (event) => {\r\n        const { value } = event.target;\r\n        setInputValue(value);\r\n        dispatch(filterByName(value));\r\n    };\r\n\r\n    return (\r\n        <SearchInput\r\n            placeholder=\"Filter traits...\"\r\n            height={40}\r\n            value={inputValue}\r\n            onChange={handleChange}\r\n        />\r\n    );\r\n}\r\n\r\nexport default Search;","import { SET_COUNTRY_BY_NAME } from '../actionTypes';\r\n\r\nexport const filterByName = (value) => ({\r\n    type: SET_COUNTRY_BY_NAME,\r\n    payload: value,\r\n});","import { FILTER_BY_REGION_FAILURE, FILTER_BY_REGION_REQUEST, FILTER_BY_REGION_SUCCESS } from '../actionTypes';\r\nimport { defaultErrorMessage } from '../constants';\r\nimport Api from '../api';\r\n\r\nconst filterByRegionRequest = () => ({\r\n    type: FILTER_BY_REGION_REQUEST,\r\n});\r\n\r\nconst filterByRegionSuccess = (counters) => ({\r\n    type: FILTER_BY_REGION_SUCCESS,\r\n    payload: counters,\r\n});\r\n\r\nconst filterByRegionFailure = (errorMessage = defaultErrorMessage) => ({\r\n    type: FILTER_BY_REGION_FAILURE,\r\n    payload: errorMessage,\r\n    error: true,\r\n});\r\n\r\nexport const fetchFilterByRegion = (region) => async (dispatch) => {\r\n\r\n    dispatch(filterByRegionRequest());\r\n\r\n    try {\r\n        const response = await Api.get(`/region/${region}`);\r\n        dispatch(filterByRegionSuccess(response.data));\r\n    } catch (error) {\r\n        dispatch(filterByRegionFailure(error.response.data.message));\r\n    }\r\n};","import React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Combobox } from 'evergreen-ui';\r\n\r\nimport { fetchFilterByRegion } from '../actions/filter';\r\nimport { fetchCountries } from '../actions/country';\r\n\r\nfunction Filter() {\r\n\r\n    const dispatch = useDispatch();\r\n    const { isFetching } = useSelector((state) => state.filter);\r\n\r\n    const handleChange = (selected) => {\r\n        if (selected) {\r\n            dispatch(fetchFilterByRegion(selected));\r\n        } else {\r\n            dispatch(fetchCountries());\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div style={{\r\n            display: 'flex',\r\n            alignItems: 'center',\r\n        }}>\r\n            <Combobox\r\n                openOnFocus\r\n                height={40}\r\n                items={['Africa', 'Americas', 'Asia', 'Europe', 'Oceania']}\r\n                onChange={handleChange}\r\n                placeholder=\"Filter by Region\"\r\n                isLoading={isFetching}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Filter;","import React from 'react';\r\n\r\nimport CountryListContainer from '../containers/CountryListContainer';\r\nimport Search from '../components/Search';\r\nimport Filter from '../components/Filter';\r\n\r\nfunction Home() {\r\n\r\n    return (\r\n        <main className=\"main\">\r\n            <div className=\"container\">\r\n                <div style={{\r\n                    display: 'flex',\r\n                    alignItems: 'center',\r\n                    justifyContent: 'space-between',\r\n                    margin: '40px 0'\r\n                }}>\r\n                    <Search />\r\n                    <Filter />\r\n                </div>\r\n                <CountryListContainer />\r\n            </div>\r\n        </main>\r\n    );\r\n}\r\n\r\nexport default Home;","import React from 'react';\r\nimport { Button } from 'evergreen-ui';\r\n\r\nimport './CountrySelected.scss';\r\n\r\nfunction CountrySelected({\r\n    name, nativeName, population, region, subregion, capital,\r\n    topLevelDomain, currencies = [], languages = [], flag, borders = [],\r\n}) {\r\n\r\n    return (\r\n        <div className=\"country-selected\">\r\n            <div className=\"country-selected__flag\">\r\n                <img src={flag} alt={name}/>\r\n            </div>\r\n            <div className=\"country-selected__body\">\r\n                <h1 className=\"country-selected__title\">{name}</h1>\r\n                <div className=\"country-selected__info\">\r\n                    <ul>\r\n                        <li>\r\n                            <strong>Native Name: </strong>\r\n                            {nativeName}\r\n                        </li>\r\n                        <li>\r\n                            <strong>Population: </strong>\r\n                            {population}\r\n                        </li>\r\n                        <li>\r\n                            <strong>Region: </strong>\r\n                            {region}\r\n                        </li>\r\n                        <li>\r\n                            <strong>Sub Region: </strong>\r\n                            {subregion}\r\n                        </li>\r\n                        <li>\r\n                            <strong>Capital: </strong>\r\n                            {capital}\r\n                        </li>\r\n                    </ul>\r\n                    <ul>\r\n                        <li>\r\n                            <strong>Top Level Domain: </strong>\r\n                            {topLevelDomain}\r\n                        </li>\r\n                        <li>\r\n                            <strong>Currencies: </strong>\r\n                            {currencies.map(({ name }) => (\r\n                                <span key={name}>{name}</span>\r\n                            ))}\r\n                        </li>\r\n                        <li>\r\n                            <strong>Languages: </strong>\r\n                            {languages.map(({ name }) => (\r\n                                <span key={name}>{name}</span>\r\n                            ))}\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n                <div style={{\r\n                    display: 'flex',\r\n                    alignItems: 'center',\r\n                }}>\r\n                    <strong>Border Countries: </strong>\r\n                    <ul style={{\r\n                        display: 'flex',\r\n                        alignItems: 'center',\r\n                    }}>\r\n                        {borders.length > 0 && borders.map((item) => (\r\n                            <li key={item}>\r\n                                <Button marginLeft={10}>{item}</Button>\r\n                            </li>\r\n                        ))}\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CountrySelected;","import React from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { BackButton } from 'evergreen-ui';\r\n\r\nfunction Back() {\r\n\r\n    const history = useHistory();\r\n\r\n    return (\r\n        <BackButton\r\n            height={40}\r\n            onClick={() => history.goBack()}\r\n        />\r\n    );\r\n}\r\n\r\nexport default Back;","import React from 'react';\r\n\r\nimport CountrySelected from './CountrySelected';\r\nimport Back from './Back';\r\n\r\nimport './CountryPage.scss';\r\nimport { Alert, Pane, Spinner } from 'evergreen-ui';\r\n\r\nfunction CountryPage({ isFetching, country, errorMessage }) {\r\n\r\n    return (\r\n        <main className=\"main\">\r\n            <div className=\"container\">\r\n                <div style={{\r\n                    display: 'flex',\r\n                    alignItems: 'center',\r\n                    justifyContent: 'space-between',\r\n                    margin: '40px 0',\r\n                }}>\r\n                    <Back/>\r\n                </div>\r\n                {errorMessage && (\r\n                    <Alert\r\n                        intent=\"danger\"\r\n                        title={errorMessage}\r\n                    />\r\n                )}\r\n                {isFetching && (\r\n                    <Pane display=\"flex\" alignItems=\"center\" justifyContent=\"center\" height={300}>\r\n                        <Spinner/>\r\n                    </Pane>\r\n                )}\r\n                {!isFetching && !errorMessage && (\r\n                    <CountrySelected {...country} />\r\n                )}\r\n            </div>\r\n        </main>\r\n    );\r\n}\r\n\r\nexport default CountryPage;","import React, { useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport CountryPage from '../components/CountryPage';\r\nimport { fetchCountry } from '../actions/country';\r\nimport { getCountrySelector } from '../selector';\r\n\r\nfunction CountryPageContainer({ match, fetchCountry, country }) {\r\n\r\n    const { slug } = match.params;\r\n\r\n    useEffect(() => {\r\n        fetchCountry(slug);\r\n    }, [fetchCountry, slug])\r\n\r\n    return <CountryPage {...country} />;\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    country: getCountrySelector(state),\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n    fetchCountry,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CountryPageContainer);","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\n\nimport Navbar from './Navbar';\nimport Home from './Home';\nimport Country from '../containers/CountryPageContainer';\n\nimport './App.scss';\n\nfunction App() {\n\n    return (\n        <Router>\n            <header className=\"header\">\n                <Navbar/>\n            </header>\n            <Switch>\n                <Route path=\"/\" component={Home} exact/>\n                <Route path=\"/country/:slug\" component={Country}/>\n            </Switch>\n        </Router>\n    );\n}\n\nexport default App;","import { GET_COUNTRY_FAILURE, GET_COUNTRY_REQUEST, GET_COUNTRY_SUCCESS } from '../actionTypes';\r\n\r\nconst initialState = {\r\n    isFetching: false,\r\n    data: {},\r\n    errorMessage: null,\r\n};\r\n\r\nexport default (state = initialState, { type, payload }) => {\r\n\r\n    switch (type) {\r\n        case GET_COUNTRY_REQUEST:\r\n            return { ...state, isFetching: true, errorMessage: null };\r\n        case GET_COUNTRY_SUCCESS:\r\n            return { ...state, isFetching: false, data: payload[0] };\r\n        case GET_COUNTRY_FAILURE:\r\n            return { ...state, isFetching: false, errorMessage: payload };\r\n        default:\r\n            return state;\r\n    }\r\n\r\n};","import {\r\n    FILTER_BY_REGION_SUCCESS,\r\n    GET_COUNTRIES_FAILURE,\r\n    GET_COUNTRIES_REQUEST,\r\n    GET_COUNTRIES_SUCCESS,\r\n    SET_COUNTRY_BY_NAME,\r\n} from '../actionTypes';\r\n\r\nconst initialState = {\r\n    isFetching: false,\r\n    countries: [],\r\n    items: [],\r\n    itemsCount: 0,\r\n    errorMessage: null,\r\n};\r\n\r\nexport default (state = initialState, { type, payload }) => {\r\n\r\n    switch (type) {\r\n        case GET_COUNTRIES_REQUEST:\r\n            return { ...state, isFetching: true, errorMessage: null };\r\n        case GET_COUNTRIES_SUCCESS:\r\n        case FILTER_BY_REGION_SUCCESS:\r\n            return {\r\n                ...state,\r\n                isFetching: false,\r\n                countries: payload,\r\n                items: payload,\r\n                itemsCount: payload.length,\r\n            };\r\n        case GET_COUNTRIES_FAILURE:\r\n            return { ...state, isFetching: false, errorMessage: payload };\r\n\r\n        case SET_COUNTRY_BY_NAME: {\r\n            const countryListByName = state.countries.filter((country) =>\r\n                country.name.toLowerCase().includes(payload.toLowerCase()));\r\n            console.log(countryListByName);\r\n            return { ...state, items: countryListByName };\r\n        }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n\r\n};","import { FILTER_BY_REGION_FAILURE, FILTER_BY_REGION_REQUEST, FILTER_BY_REGION_SUCCESS } from '../actionTypes';\r\n\r\nconst initialState = {\r\n    isFetching: false,\r\n    errorMessage: null,\r\n};\r\n\r\nexport default (state = initialState, { type, payload }) => {\r\n\r\n    switch (type) {\r\n        case FILTER_BY_REGION_REQUEST:\r\n            return { ...state, isFetching: true, errorMessage: null };\r\n        case FILTER_BY_REGION_SUCCESS:\r\n            return { ...state, isFetching: false };\r\n        case FILTER_BY_REGION_FAILURE:\r\n            return { ...state, isFetching: false, errorMessage: payload };\r\n        default:\r\n            return state;\r\n    }\r\n\r\n};","import { combineReducers } from 'redux';\r\n\r\nimport country from './country';\r\nimport countries from './countries';\r\nimport filter from './filter';\r\n\r\nconst rootReducer = combineReducers({\r\n    country,\r\n    countries,\r\n    filter,\r\n});\r\n\r\nexport default rootReducer;","import { createStore, applyMiddleware } from 'redux';\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\n\r\nimport rootReducer from './reducers';\r\n\r\nconst store = createStore(\r\n    rootReducer,\r\n    composeWithDevTools(\r\n        applyMiddleware(thunkMiddleware),\r\n    ),\r\n);\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport App from './components/App';\nimport store from './store';\n\nimport './index.scss';\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root'),\n);"],"sourceRoot":""}